// <auto-generated />
using System;
using Enviromental_Measurement.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Enviromental_Measurement.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.31");

            modelBuilder.Entity("Enviromental_Measurement.Domain.Entities.Samples.Sample", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("BoolValue")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<double?>("DecimalValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("IntValue")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("VariableId")
                        .HasColumnType("TEXT");

                    b.Property<int>("type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VariableId");

                    b.ToTable("Samples", (string)null);
                });

            modelBuilder.Entity("Enviromental_Measurement.Domain.Entities.Structures.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("BuildingNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Buildings", (string)null);
                });

            modelBuilder.Entity("Enviromental_Measurement.Domain.Entities.Structures.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Building_Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Building_Id");

                    b.ToTable("Floors", (string)null);
                });

            modelBuilder.Entity("Enviromental_Measurement.Domain.Entities.Structures.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsProduction")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("Enviromental_Measurement.Entities.Variable.Variable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BuildingID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FloorID")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("RoomID")
                        .HasColumnType("TEXT");

                    b.Property<string>("VariableCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VariableName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BuildingID");

                    b.HasIndex("FloorID");

                    b.HasIndex("RoomID");

                    b.ToTable("Variables", (string)null);
                });

            modelBuilder.Entity("Enviromental_Measurement.Domain.Entities.Samples.Sample", b =>
                {
                    b.HasOne("Enviromental_Measurement.Entities.Variable.Variable", null)
                        .WithMany()
                        .HasForeignKey("VariableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enviromental_Measurement.Domain.Entities.Structures.Building", b =>
                {
                    b.OwnsOne("Enviromental_Measurement.ValueObjects.PhysicalAddress", "Address", b1 =>
                        {
                            b1.Property<Guid>("BuildingId")
                                .HasColumnType("TEXT");

                            b1.HasKey("BuildingId");

                            b1.ToTable("Buildings");

                            b1.WithOwner()
                                .HasForeignKey("BuildingId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Enviromental_Measurement.Domain.Entities.Structures.Floor", b =>
                {
                    b.HasOne("Enviromental_Measurement.Domain.Entities.Structures.Building", null)
                        .WithMany()
                        .HasForeignKey("Building_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enviromental_Measurement.Domain.Entities.Structures.Room", b =>
                {
                    b.HasOne("Enviromental_Measurement.Domain.Entities.Structures.Floor", null)
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enviromental_Measurement.Entities.Variable.Variable", b =>
                {
                    b.HasOne("Enviromental_Measurement.Domain.Entities.Structures.Building", null)
                        .WithMany()
                        .HasForeignKey("BuildingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Enviromental_Measurement.Domain.Entities.Structures.Floor", null)
                        .WithMany()
                        .HasForeignKey("FloorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Enviromental_Measurement.Domain.Entities.Structures.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Enviromental_Measurement.ValueObjects.Measurement_Unit", "unit", b1 =>
                        {
                            b1.Property<Guid>("VariableId")
                                .HasColumnType("TEXT");

                            b1.HasKey("VariableId");

                            b1.ToTable("Variables");

                            b1.WithOwner()
                                .HasForeignKey("VariableId");
                        });

                    b.Navigation("unit")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
